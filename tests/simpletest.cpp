#include <cstdio>
#include <iostream>

#include "../src/private/geometry.hpp"
#include "../src/coordinate.hpp"
#include "../src/geometryll.hpp"
#include "../src/region.hpp"

// BOOST
#include <boost/shared_ptr.hpp>

//void pointll_unit_test() {
//    metno::s3::ll::GeometryFactoryLL factoryll;

//    factoryll.init();

//    boost::shared_ptr<metno::s3::Geometry> pt1 = factoryll.createPoint(120.9999, 121.0);

//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" : "
//             <<"pt1 : "<<pt1->toWKT()
//             <<std::endl;

//   boost::shared_ptr<metno::s3::Geometry> pt2 = factoryll.createPoint(120.9999, 121.0);

//   std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" : "
//            <<"pt2 : "<<pt2->toWKT()
//            <<std::endl;

//   std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" : "
//            <<"pt1 equals pt2: "<<(pt1->equals(pt2)?"TRUE":"FALSE")
//            <<std::endl;

//   boost::shared_ptr<metno::s3::Geometry> pt3 = factoryll.createPoint(99, 100);

//   std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" : "
//            <<"pt3 : "<<pt3->toWKT()
//            <<std::endl;

//   boost::shared_ptr<metno::s3::Geometry> pt1unionpt2 = pt1->Union(pt2);

//   std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" : "
//            <<"pt1 union pt2: "<<pt1unionpt2->toWKT()
//            <<std::endl;

//   boost::shared_ptr<metno::s3::Geometry> pt1unionpt3 = pt1->Union(pt3);

//   std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" : "
//            <<"pt1 union pt3: "<<pt1unionpt3->toWKT()
//            <<std::endl;

//   metno::s3::Geometry* pt1diffpt2 = pt1->Difference(pt2.get());

//   std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" : "
//            <<"pt1 difference pt2: "<<pt1diffpt2->toWKT()
//            <<std::endl;

//   boost::shared_ptr<metno::s3::Geometry> pt1diffpt3 = boost::shared_ptr<metno::s3::Geometry>(pt1->Difference(pt3.get()));

//   std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" : "
//            <<"pt1 difference pt3: "<<pt1diffpt3->toWKT()
//            <<std::endl;
//}

//typedef metno::s3::Region<metno::s3::ll::GeometryLL> RegionLL;

//void regionll_unit_test() {

//    metno::s3::ll::GeometryFactoryLL factoryLL;
//    factoryLL.init();

////    RegionLL reg1();

////    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" : "<<std::endl
////             <<"reg1 :      "<<std::endl
////             <<"\tid      : "<<reg1.getId()<<std::endl
////             <<"\tname    : "<<reg1.getName()<<std::endl
////             <<"\tisValid : "<<(reg1.isValid()?"TRUE":"FALSE")<<std::endl
////             <<"\tlength  : "<<reg1.getLength()<<std::endl
////             <<"\tarea    : "<<reg1.getArea()<<std::endl;

//    boost::shared_ptr<metno::s3::Geometry> mask =
//            factoryLL.fromWKT("POLYGON ((7.5099000000000000 7.5099000000000000, 7.5099000000000000 10.0000000000000000, 16.2753000000000014 10.0000000000000000, 16.2753000000000014 7.5099000000000000, 7.5099000000000000 7.5099000000000000))");
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" : "<<std::endl
//             <<"mask :      "<<std::endl
//             <<"\tisValid :  "<<(mask->isValid()?"TRUE":"FALSE")<<std::endl
//             <<"\tisSimple : "<<(mask->isSimple()?"TRUE":"FALSE")<<std::endl
//             <<"\tWKT      :  "<<mask->toWKT()<<std::endl;

//    boost::shared_ptr<metno::s3::Geometry> region =
//            factoryLL.fromWKT("POLYGON ((10.0000000000000000 10.0000000000000000, 9.3300000000000001 9.3300000000000001, 9.1799999999999997 9.1799999999999997, 7.5099000000000000 7.5099000000000000, 9.3002000000000002 9.3002000000000002, 10.5998999999999999 10.5998999999999999, 11.1500000000000004 11.1500000000000004, 11.2399000000000004 11.2399000000000004, 11.4800000000000004 11.4800000000000004, 12.1500000000000004 12.1500000000000004, 12.4800000000000004 12.4800000000000004, 12.4770000000000003 12.4770000000000003, 12.3621999999999996 12.3621999999999996, 12.3042999999999996 12.3042999999999996, 12.5449999999999999 12.5449999999999999, 14.3292000000000002 14.3292000000000002, 15.0982000000000003 15.0982000000000003, 16.0376000000000012 16.0376000000000012, 16.2753000000000014 16.2753000000000014, 15.1198999999999995 15.1198999999999995, 12.3899000000000008 12.3899000000000008, 12.0899000000000001 12.0899000000000001, 11.2399000000000004 11.2399000000000004, 10.4499999999999993 10.4499999999999993, 10.0000000000000000 10.0000000000000000))");
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" : "<<std::endl
//             <<"region :      "<<std::endl
//             <<"\tisValid :  "<<(region->isValid()?"TRUE":"FALSE")<<std::endl
//             <<"\tisSimple : "<<(region->isSimple()?"TRUE":"FALSE")<<std::endl
//             <<"\tWKT      :  "<<region->toWKT()<<std::endl;

//    boost::shared_ptr<metno::s3::Geometry> corrected = region->Buffer(1.0/10000.0);
////    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" : "<<std::endl
////             <<"corrected :      "<<std::endl
////             <<"\tisValid :  "<<(corrected->isValid()?"TRUE":"FALSE")<<std::endl
////             <<"\tisSimple : "<<(corrected->isSimple()?"TRUE":"FALSE")<<std::endl
////             <<"\tWKT      :  "<<corrected->toWKT()<<std::endl;

////    metno::s3::Geometry* difference = corrected->Difference(mask.get());
//}

int main(int argc, char *argv[]) {

    metno::s3::CoordinatePtr valid(new metno::s3::Coordinate(100, 100));
    metno::s3::CoordinatePtr nonValid(new metno::s3::Coordinate(100, std::numeric_limits<double>::quiet_NaN()));

    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" COORDINATE: "<<valid->toString()<<" isValid "<<(valid->isValid()?"TRUE":"FALSE")<< std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" COORDINATE: "<<nonValid->toString()<<" isValid "<<(nonValid->isValid()?"TRUE":"FALSE")<< std::endl;

    metno::s3::CoordinatePtrSequence seq;
    seq.push_back(nonValid);
    seq.push_back(valid);
    seq.push_back(valid);
    seq.push_back(metno::s3::CoordinatePtr(new metno::s3::Coordinate(200, 200)));
    seq.push_back(valid);
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" seq "<<seq.toString()<< std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" seq hasRepeatedPoints "<<(seq.hasRepeatedPoints()?"TRUE":"FALSE")<< std::endl;

    seq.removeRepeatedPoints();
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" seq "<<seq.toString()<< std::endl;

    metno::s3::GeometryImpl<4362> geom_wgs84;

    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" CHECK "<< std::endl;

    metno::s3::GeometryImpl<0> geom_d2;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" SRID "<< geom_d2.getSRID() <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" isEmpty "<< (geom_d2.isEmpty()?"TRUE":"FALSE") <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" isValid "<< (geom_d2.isValid()?"TRUE":"FALSE") <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" isSimple "<< (geom_d2.isSimple()?"TRUE":"FALSE") <<std::endl;

//    boost::shared_ptr<metno::s3::Coordinate> location2(geom_d2.getNonSimpleLocation());
//    if(location2.get()) std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" non simple location "<<location2->toString()<<std::endl;

    metno::s3::CoordinatePtrSequence coordinates;
    geom_wgs84.getCoordinates(coordinates);
    for(size_t i = 0; i < coordinates.size(); ++i)
        std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" coordinate "<< coordinates.at(i)->toString() <<std::endl;

    metno::s3::PointImpl<0> pt_d2;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" SRID "<< pt_d2.getSRID() <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" X "<< pt_d2.getX() <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" Y "<< pt_d2.getY() <<std::endl;

//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" geom_d2 insterects pt_d2 "<< (geom_d2.intersects(pt_d2)?"TRUE":"FALSE")<<std::endl;

//    metno::s3::PolygonImpl<4362> poly_wgs84;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" geom_wgs84 insterects poly_wgs84 "<< (geom_wgs84.intersects(poly_wgs84)?"TRUE":"FALSE")<<std::endl;

//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" geom_d2 insterects geom_wgs84 "<< (geom_d2.intersects(&geom_wgs84)?"TRUE":"FALSE")<<std::endl;

//    boost::shared_ptr<metno::s3::GeometryImpl<4362> > buffer = poly_wgs84.Buffer(0.001);
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" SRID "<< buffer->getSRID() <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" isEmpty "<< (buffer->isEmpty()?"TRUE":"FALSE") <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" isValid "<< (buffer->isValid()?"TRUE":"FALSE") <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" isSimple "<< (buffer->isSimple()?"TRUE":"FALSE") <<std::endl;

//    boost::shared_ptr<metno::s3::GeometryImpl<4362> > pt = metno::s3::GeometryImpl<4362>::createPoint(100, 100);
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" SRID "<< pt->getSRID() <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" WKT -> "<< pt->toWKT() <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" isEmpty "<< (pt->isEmpty()?"TRUE":"FALSE") <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" isValid "<< (pt->isValid()?"TRUE":"FALSE") <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" isSimple "<< (pt->isSimple()?"TRUE":"FALSE") <<std::endl;

//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" SRID "<< poly->getSRID() <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" WKT -> "<< poly->toWKT() <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" isEmpty "<< (poly->isEmpty()?"TRUE":"FALSE") <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" isValid "<< (poly->isValid()?"TRUE":"FALSE") <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" isSimple "<< (poly->isSimple()?"TRUE":"FALSE") <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" isRectangle "<< (poly->isRectangle()?"TRUE":"FALSE") <<std::endl;


    std::string maskWKT("POLYGON ((7.5099000000000000 7.5099000000000000, 7.5099000000000000 10.0000000000000000, 16.2753000000000014 10.0000000000000000, 16.2753000000000014 7.5099000000000000, 7.5099000000000000 7.5099000000000000))");
    boost::shared_ptr<metno::s3::GeometryImpl<4362> > mask = metno::s3::GeometryImpl<4362>::fromWKT(maskWKT);
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" SRID "<< mask->getSRID() <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" WKT -> "<< mask->toWKT() <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" isEmpty "<< (mask->isEmpty()?"TRUE":"FALSE") <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" isValid "<< (mask->isValid()?"TRUE":"FALSE") <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" isSimple "<< (mask->isSimple()?"TRUE":"FALSE") <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" isRectangle "<< (mask->isRectangle()?"TRUE":"FALSE") <<std::endl;

    std::string regionWKT("POLYGON ((10.0000000000000000 10.0000000000000000, 9.3300000000000001 9.3300000000000001, 9.1799999999999997 9.1799999999999997, 7.5099000000000000 7.5099000000000000, 9.3002000000000002 9.3002000000000002, 10.5998999999999999 10.5998999999999999, 11.1500000000000004 11.1500000000000004, 11.2399000000000004 11.2399000000000004, 11.4800000000000004 11.4800000000000004, 12.1500000000000004 12.1500000000000004, 12.4800000000000004 12.4800000000000004, 12.4770000000000003 12.4770000000000003, 12.3621999999999996 12.3621999999999996, 12.3042999999999996 12.3042999999999996, 12.5449999999999999 12.5449999999999999, 14.3292000000000002 14.3292000000000002, 15.0982000000000003 15.0982000000000003, 16.0376000000000012 16.0376000000000012, 16.2753000000000014 16.2753000000000014, 15.1198999999999995 15.1198999999999995, 12.3899000000000008 12.3899000000000008, 12.0899000000000001 12.0899000000000001, 11.2399000000000004 11.2399000000000004, 10.4499999999999993 10.4499999999999993, 10.0000000000000000 10.0000000000000000))");
    boost::shared_ptr<metno::s3::GeometryImpl<4362> > region = metno::s3::GeometryImpl<4362>::fromWKT(regionWKT);

    boost::shared_ptr<metno::s3::GeometryImpl<4362> > buffer = region->Buffer(0.000001);

    boost::shared_ptr<metno::s3::GeometryImpl<4362> > diff = buffer->Difference(mask);
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" diff SRID "<< diff->getSRID() <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" diff WKT  "<< diff->toWKT() <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" diff isEmpty "<< (diff->isEmpty()?"TRUE":"FALSE") <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" diff isValid "<< (diff->isValid()?"TRUE":"FALSE") <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" diff isSimple "<< (diff->isSimple()?"TRUE":"FALSE") <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" diff isRectangle "<< (diff->isRectangle()?"TRUE":"FALSE") <<std::endl;
//    pointll_unit_test();

//    regionll_unit_test();

    metno::s3::PointLL point;
    point.setLon(1); point.setLat(2);
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" point SRID "<< point.getSRID() <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" point WKT  "<< point.toWKT() <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" point isEmpty "<< (point.isEmpty()?"TRUE":"FALSE") <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" point isValid "<< (point.isValid()?"TRUE":"FALSE") <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" point isSimple "<< (point.isSimple()?"TRUE":"FALSE") <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" point isRectangle "<< (point.isRectangle()?"TRUE":"FALSE") <<std::endl;


    boost::shared_ptr<metno::s3::GeometryLL> lhs =
            metno::s3::GeometryLL::fromWKT("POLYGON ((10.3917999999999999 10.3917999999999999, 10.5425000000000004 10.5425000000000004, 10.5564999999999998 10.5564999999999998, 10.5907000000000000 10.5907000000000000, 11.0409000000000006 11.0409000000000006, 11.0564000000000000 11.0564000000000000, 11.0607000000000006 11.0607000000000006, 11.0708000000000002 11.0708000000000002, 11.0919000000000008 11.0919000000000008, 11.1066000000000003 11.1066000000000003, 11.1257000000000001 11.1257000000000001, 11.1356000000000002 11.1356000000000002, 11.1376000000000008 11.1376000000000008, 11.1399000000000008 11.1399000000000008, 11.1468000000000007 11.1468000000000007, 11.1509999999999998 11.1509999999999998, 11.1532999999999998 11.1532999999999998, 11.1554000000000002 11.1554000000000002, 11.1574000000000009 11.1574000000000009, 11.1621000000000006 11.1621000000000006, 11.1647999999999996 11.1647999999999996, 11.1714000000000002 11.1714000000000002, 11.1735000000000007 11.1735000000000007, 11.1754999999999995 11.1754999999999995, 11.1818000000000008 11.1818000000000008, 11.1959000000000000 11.1959000000000000, 11.2035999999999998 11.2035999999999998, 11.2203999999999997 11.2203999999999997, 11.2308000000000003 11.2308000000000003, 11.2333999999999996 11.2333999999999996, 11.2482000000000006 11.2482000000000006, 11.2589000000000006 11.2589000000000006, 11.2627000000000006 11.2627000000000006, 11.2650000000000006 11.2650000000000006, 11.2698000000000000 11.2698000000000000, 11.2729999999999997 11.2729999999999997, 11.2789000000000001 11.2789000000000001, 11.2759999999999998 11.2759999999999998, 11.2748000000000008 11.2748000000000008, 11.2738999999999994 11.2738999999999994, 11.2721000000000000 11.2721000000000000, 11.2768999999999995 11.2768999999999995, 11.2757000000000005 11.2757000000000005, 11.2766000000000002 11.2766000000000002, 11.2771000000000008 11.2771000000000008, 11.2781000000000002 11.2781000000000002, 11.2736000000000001 11.2736000000000001, 11.2736000000000001 11.2736000000000001, 11.2734000000000005 11.2734000000000005, 11.2738999999999994 11.2738999999999994, 11.2729999999999997 11.2729999999999997, 11.2736000000000001 11.2736000000000001, 11.2759000000000000 11.2759000000000000, 11.2893000000000008 11.2893000000000008, 11.2897999999999996 11.2897999999999996, 11.2909000000000006 11.2909000000000006, 11.2926000000000002 11.2926000000000002, 11.2934000000000001 11.2934000000000001, 11.2947000000000006 11.2947000000000006, 11.2955000000000005 11.2955000000000005, 11.2965999999999998 11.2965999999999998, 11.2977000000000007 11.2977000000000007, 11.2988999999999997 11.2988999999999997, 11.3001000000000005 11.3001000000000005, 11.3031000000000006 11.3031000000000006, 11.3056999999999999 11.3056999999999999, 11.3080999999999996 11.3080999999999996, 11.3095999999999997 11.3095999999999997, 11.3095999999999997 11.3095999999999997, 11.3132000000000001 11.3132000000000001, 11.3148000000000000 11.3148000000000000, 11.3179999999999996 11.3179999999999996, 11.3195999999999994 11.3195999999999994, 11.3214000000000006 11.3214000000000006, 11.3229000000000006 11.3229000000000006, 11.3231000000000002 11.3231000000000002, 11.3231000000000002 11.3231000000000002, 11.3208000000000002 11.3208000000000002, 11.3229000000000006 11.3229000000000006, 11.3231000000000002 11.3231000000000002, 11.3233999999999995 11.3233999999999995, 11.3251000000000008 11.3251000000000008, 11.3253000000000004 11.3253000000000004, 11.3262000000000000 11.3262000000000000, 11.3270000000000000 11.3270000000000000, 11.3270000000000000 11.3270000000000000, 11.3277000000000001 11.3277000000000001, 11.3292000000000002 11.3292000000000002, 11.3300000000000001 11.3300000000000001, 11.3300999999999998 11.3300999999999998, 11.3317999999999994 11.3317999999999994, 11.3328000000000007 11.3328000000000007, 11.3338999999999999 11.3338999999999999, 11.3361000000000001 11.3361000000000001, 11.3375000000000004 11.3375000000000004, 11.3384000000000000 11.3384000000000000, 11.3398000000000003 11.3398000000000003, 11.3407999999999998 11.3407999999999998, 11.3422999999999998 11.3422999999999998, 11.3436000000000003 11.3436000000000003, 11.3451000000000004 11.3451000000000004, 11.3452999999999999 11.3452999999999999, 11.3454999999999995 11.3454999999999995, 11.3457000000000008 11.3457000000000008, 11.3460000000000001 11.3460000000000001, 11.3472000000000008 11.3472000000000008, 11.3476999999999997 11.3476999999999997, 11.3481000000000005 11.3481000000000005, 11.3490000000000002 11.3490000000000002, 11.3498000000000001 11.3498000000000001, 11.3506999999999998 11.3506999999999998, 11.3519000000000005 11.3519000000000005, 11.3521000000000001 11.3521000000000001, 11.3544000000000000 11.3544000000000000, 11.3559000000000001 11.3559000000000001, 11.3619000000000003 11.3619000000000003, 11.3734999999999999 11.3734999999999999, 11.3759999999999994 11.3759999999999994, 11.3770000000000007 11.3770000000000007, 11.3778000000000006 11.3778000000000006, 11.3823000000000008 11.3823000000000008, 11.3911999999999995 11.3911999999999995, 11.3925999999999998 11.3925999999999998, 11.3940000000000001 11.3940000000000001, 11.3947000000000003 11.3947000000000003, 11.3961000000000006 11.3961000000000006, 11.3963000000000001 11.3963000000000001, 11.3957999999999995 11.3957999999999995, 11.3948000000000000 11.3948000000000000, 11.3956999999999997 11.3956999999999997, 11.3985000000000003 11.3985000000000003, 11.4015000000000004 11.4015000000000004, 11.4047000000000001 11.4047000000000001, 11.4055999999999997 11.4055999999999997, 11.4041999999999994 11.4041999999999994, 11.4041999999999994 11.4041999999999994, 11.4049999999999994 11.4049999999999994, 11.4070999999999998 11.4070999999999998, 11.4090000000000007 11.4090000000000007, 11.4090000000000007 11.4090000000000007, 11.4097000000000008 11.4097000000000008, 11.4131000000000000 11.4131000000000000, 11.4131000000000000 11.4131000000000000, 11.4125999999999994 11.4125999999999994, 11.4122000000000003 11.4122000000000003, 11.4116999999999997 11.4116999999999997, 11.4123000000000001 11.4123000000000001, 11.4131000000000000 11.4131000000000000, 11.4115000000000002 11.4115000000000002, 11.4116999999999997 11.4116999999999997, 11.4132999999999996 11.4132999999999996, 11.4146000000000001 11.4146000000000001, 11.4159000000000006 11.4159000000000006, 11.4154999999999998 11.4154999999999998, 11.4153000000000002 11.4153000000000002, 11.4145000000000003 11.4145000000000003, 11.4146000000000001 11.4146000000000001, 11.4138000000000002 11.4138000000000002, 11.4109999999999996 11.4109999999999996, 11.4105000000000008 11.4105000000000008, 11.4108000000000001 11.4108000000000001, 11.4116999999999997 11.4116999999999997, 11.4131000000000000 11.4131000000000000, 11.4154000000000000 11.4154000000000000, 11.4152000000000005 11.4152000000000005, 11.4161000000000001 11.4161000000000001, 11.4171999999999993 11.4171999999999993, 11.4177000000000000 11.4177000000000000, 11.4185999999999996 11.4185999999999996, 11.4190000000000005 11.4190000000000005, 11.4227000000000007 11.4227000000000007, 11.4260000000000002 11.4260000000000002, 11.4313000000000002 11.4313000000000002, 11.4334000000000007 11.4334000000000007, 11.4342000000000006 11.4342000000000006, 11.4350000000000005 11.4350000000000005, 11.4361999999999995 11.4361999999999995, 11.4375000000000000 11.4375000000000000, 11.4381000000000004 11.4381000000000004, 11.4396000000000004 11.4396000000000004, 11.4413000000000000 11.4413000000000000, 11.4434000000000005 11.4434000000000005, 11.4441000000000006 11.4441000000000006, 11.4465000000000003 11.4465000000000003, 11.4490999999999996 11.4490999999999996, 11.4504000000000001 11.4504000000000001, 11.4519000000000002 11.4519000000000002, 11.4540000000000006 11.4540000000000006, 11.4556000000000004 11.4556000000000004, 11.4574999999999996 11.4574999999999996, 11.4594000000000005 11.4594000000000005, 11.4611000000000001 11.4611000000000001, 11.4625000000000004 11.4625000000000004, 11.4641000000000002 11.4641000000000002, 11.4651999999999994 11.4651999999999994, 11.4663000000000004 11.4663000000000004, 11.4658999999999995 11.4658999999999995, 11.4657000000000000 11.4657000000000000, 11.4657000000000000 11.4657000000000000, 11.4663000000000004 11.4663000000000004, 11.4664999999999999 11.4664999999999999, 11.4672000000000001 11.4672000000000001, 11.4684000000000008 11.4684000000000008, 11.4673999999999996 11.4673999999999996, 11.4670000000000005 11.4670000000000005, 11.4658999999999995 11.4658999999999995, 11.4618000000000002 11.4618000000000002, 11.4609000000000005 11.4609000000000005, 11.4603000000000002 11.4603000000000002, 11.4596000000000000 11.4596000000000000, 11.4580000000000002 11.4580000000000002, 11.4595000000000002 11.4595000000000002, 11.4603000000000002 11.4603000000000002, 11.4670000000000005 11.4670000000000005, 11.4664999999999999 11.4664999999999999, 11.4657000000000000 11.4657000000000000, 11.4658999999999995 11.4658999999999995, 11.4657000000000000 11.4657000000000000, 11.4649000000000001 11.4649000000000001, 11.4649999999999999 11.4649999999999999, 11.4664999999999999 11.4664999999999999, 11.4688999999999997 11.4688999999999997, 11.4695000000000000 11.4695000000000000, 11.4702000000000002 11.4702000000000002, 11.4699000000000009 11.4699000000000009, 11.4695999999999998 11.4695999999999998, 11.4693000000000005 11.4693000000000005, 11.4688999999999997 11.4688999999999997, 11.4695999999999998 11.4695999999999998, 11.4699000000000009 11.4699000000000009, 11.4695000000000000 11.4695000000000000, 11.4702000000000002 11.4702000000000002, 11.4709000000000003 11.4709000000000003, 11.4733999999999998 11.4733999999999998, 11.4760000000000009 11.4760000000000009, 11.4772999999999996 11.4772999999999996, 11.4792000000000005 11.4792000000000005, 11.4816000000000003 11.4816000000000003, 11.4840999999999998 11.4840999999999998, 11.4876000000000005 11.4876000000000005, 11.4900000000000002 11.4900000000000002, 11.4955999999999996 11.4955999999999996, 11.4990000000000006 11.4990000000000006, 11.4985999999999997 11.4985999999999997, 11.4960000000000004 11.4960000000000004, 11.4951000000000008 11.4951000000000008, 11.4931000000000001 11.4931000000000001, 11.4925999999999995 11.4925999999999995, 11.4936000000000007 11.4936000000000007, 11.4901999999999997 11.4901999999999997, 11.4861000000000004 11.4861000000000004, 11.4742999999999995 11.4742999999999995, 11.4757999999999996 11.4757999999999996, 11.4684000000000008 11.4684000000000008, 11.4649000000000001 11.4649000000000001, 11.4570000000000007 11.4570000000000007, 11.4564000000000004 11.4564000000000004, 11.4525000000000006 11.4525000000000006, 11.4486000000000008 11.4486000000000008, 11.4443000000000001 11.4443000000000001, 11.4375000000000000 11.4375000000000000, 11.4152000000000005 11.4152000000000005, 11.4193999999999996 11.4193999999999996, 11.4303000000000008 11.4303000000000008, 11.4329000000000001 11.4329000000000001, 11.4579000000000004 11.4579000000000004, 11.4658999999999995 11.4658999999999995, 11.4747000000000003 11.4747000000000003, 11.4867000000000008 11.4867000000000008, 11.5126000000000008 11.5126000000000008, 11.5145000000000000 11.5145000000000000, 11.5183000000000000 11.5183000000000000, 11.5228999999999999 11.5228999999999999, 11.5259000000000000 11.5259000000000000, 11.5274000000000001 11.5274000000000001, 11.5343000000000000 11.5343000000000000, 11.5633999999999997 11.5633999999999997, 11.5653000000000006 11.5653000000000006, 11.5660000000000007 11.5660000000000007, 11.5676000000000005 11.5676000000000005, 11.5679999999999996 11.5679999999999996, 11.5669000000000004 11.5669000000000004, 11.5655000000000001 11.5655000000000001, 11.5640000000000001 11.5640000000000001, 11.5631000000000004 11.5631000000000004, 11.5632000000000001 11.5632000000000001, 11.5631000000000004 11.5631000000000004, 11.5632999999999999 11.5632999999999999, 11.5625999999999998 11.5625999999999998, 11.5631000000000004 11.5631000000000004, 11.5617000000000001 11.5617000000000001, 11.5606000000000009 11.5606000000000009, 11.5609999999999999 11.5609999999999999, 11.5623000000000005 11.5623000000000005, 11.5625000000000000 11.5625000000000000, 11.5629000000000008 11.5629000000000008, 11.5625000000000000 11.5625000000000000, 11.5629000000000008 11.5629000000000008, 11.5625000000000000 11.5625000000000000, 11.5625000000000000 11.5625000000000000, 11.5623000000000005 11.5623000000000005, 11.5632000000000001 11.5632000000000001, 11.5631000000000004 11.5631000000000004, 11.5625000000000000 11.5625000000000000, 11.5602999999999998 11.5602999999999998, 11.5608000000000004 11.5608000000000004, 11.5602000000000000 11.5602000000000000, 11.5603999999999996 11.5603999999999996, 11.5608000000000004 11.5608000000000004, 11.5608000000000004 11.5608000000000004, 11.5578000000000003 11.5578000000000003, 11.5564999999999998 11.5564999999999998, 11.5558999999999994 11.5558999999999994, 11.5548000000000002 11.5548000000000002, 11.5541000000000000 11.5541000000000000, 11.5541000000000000 11.5541000000000000, 11.5548999999999999 11.5548999999999999, 11.5554000000000006 11.5554000000000006, 11.5593000000000004 11.5593000000000004, 11.5603999999999996 11.5603999999999996, 11.5603999999999996 11.5603999999999996, 11.5579000000000001 11.5579000000000001, 11.5587999999999997 11.5587999999999997, 11.5599000000000007 11.5599000000000007, 11.5595999999999997 11.5595999999999997, 11.5599000000000007 11.5599000000000007, 11.5594999999999999 11.5594999999999999, 11.5599000000000007 11.5599000000000007, 11.5586000000000002 11.5586000000000002, 11.5593000000000004 11.5593000000000004, 11.5584000000000007 11.5584000000000007, 11.5579999999999998 11.5579999999999998, 11.5571000000000002 11.5571000000000002, 11.5563000000000002 11.5563000000000002, 11.5558999999999994 11.5558999999999994, 11.5564000000000000 11.5564000000000000, 11.5426000000000002 11.5426000000000002, 11.5564000000000000 11.5564000000000000, 11.5568000000000008 11.5568000000000008, 11.5563000000000002 11.5563000000000002, 11.5553000000000008 11.5553000000000008, 11.5539000000000005 11.5539000000000005, 11.5518000000000001 11.5518000000000001, 11.5500000000000007 11.5500000000000007, 11.5488000000000000 11.5488000000000000, 11.5480000000000000 11.5480000000000000, 11.5463000000000005 11.5463000000000005, 11.5457999999999998 11.5457999999999998, 11.5441000000000003 11.5441000000000003, 11.5442000000000000 11.5442000000000000, 11.5439000000000007 11.5439000000000007, 11.5434000000000001 11.5434000000000001, 11.5418000000000003 11.5418000000000003, 11.5404999999999998 11.5404999999999998, 11.5373000000000001 11.5373000000000001, 11.5355000000000008 11.5355000000000008, 11.5343000000000000 11.5343000000000000, 11.5334000000000003 11.5334000000000003, 11.5314999999999994 11.5314999999999994, 11.5274000000000001 11.5274000000000001, 11.5263000000000009 11.5263000000000009, 11.5218000000000007 11.5218000000000007, 11.5197000000000003 11.5197000000000003, 11.5172000000000008 11.5172000000000008, 11.5154999999999994 11.5154999999999994, 11.5122000000000000 11.5122000000000000, 11.5107999999999997 11.5107999999999997, 11.5091000000000001 11.5091000000000001, 11.5082000000000004 11.5082000000000004, 11.5065000000000008 11.5065000000000008, 11.5044000000000004 11.5044000000000004, 11.5053999999999998 11.5053999999999998, 11.5111000000000008 11.5111000000000008, 11.5127000000000006 11.5127000000000006, 11.5149000000000008 11.5149000000000008, 11.5195000000000007 11.5195000000000007, 11.5206999999999997 11.5206999999999997, 11.5221999999999998 11.5221999999999998, 11.5245999999999995 11.5245999999999995, 11.5256000000000007 11.5256000000000007, 11.5268999999999995 11.5268999999999995, 11.5282999999999998 11.5282999999999998, 11.5306999999999995 11.5306999999999995, 11.5318000000000005 11.5318000000000005, 11.5327000000000002 11.5327000000000002, 11.5328999999999997 11.5328999999999997, 11.5312000000000001 11.5312000000000001, 11.5302000000000007 11.5302000000000007, 11.5291999999999994 11.5291999999999994, 11.5290999999999997 11.5290999999999997, 11.5303000000000004 11.5303000000000004, 11.5311000000000003 11.5311000000000003, 11.5318000000000005 11.5318000000000005, 11.5351999999999997 11.5351999999999997, 11.5366999999999997 11.5366999999999997, 11.5382999999999996 11.5382999999999996, 11.5397999999999996 11.5397999999999996, 11.5411000000000001 11.5411000000000001, 11.5427000000000000 11.5427000000000000, 11.5462000000000007 11.5462000000000007, 11.5477000000000007 11.5477000000000007, 11.5492000000000008 11.5492000000000008, 11.5519999999999996 11.5519999999999996, 11.5533000000000001 11.5533000000000001, 11.5541000000000000 11.5541000000000000, 11.5540000000000003 11.5540000000000003, 11.5530000000000008 11.5530000000000008, 11.5527999999999995 11.5527999999999995, 11.5531000000000006 11.5531000000000006, 11.5541000000000000 11.5541000000000000, 11.5569000000000006 11.5569000000000006, 11.5579000000000001 11.5579000000000001, 11.5592000000000006 11.5592000000000006, 11.5609000000000002 11.5609000000000002, 11.5657999999999994 11.5657999999999994, 11.5907999999999998 11.5907999999999998, 11.5928000000000004 11.5928000000000004, 11.5990000000000002 11.5990000000000002, 12.0060000000000002 12.0060000000000002, 12.0196000000000005 12.0196000000000005, 12.0274999999999999 12.0274999999999999, 12.0325000000000006 12.0325000000000006, 12.0602000000000000 12.0602000000000000, 12.0762000000000000 12.0762000000000000, 12.0939999999999994 12.0939999999999994, 12.1051000000000002 12.1051000000000002, 12.1255000000000006 12.1255000000000006, 12.1394000000000002 12.1394000000000002, 12.2055000000000007 12.2055000000000007, 12.2155000000000005 12.2155000000000005, 12.2341999999999995 12.2341999999999995, 12.2379999999999995 12.2379999999999995, 12.2553000000000001 12.2553000000000001, 12.2697000000000003 12.2697000000000003, 12.2888000000000002 12.2888000000000002, 12.2934999999999999 12.2934999999999999, 12.2992000000000008 12.2992000000000008, 12.3019999999999996 12.3019999999999996, 12.3255999999999997 12.3255999999999997, 12.3154000000000003 12.3154000000000003, 12.3041000000000000 12.3041000000000000, 12.3018000000000001 12.3018000000000001, 12.3000000000000007 12.3000000000000007, 12.3218999999999994 12.3218999999999994, 12.3291000000000004 12.3291000000000004, 12.3521999999999998 12.3521999999999998, 12.3641000000000005 12.3641000000000005, 12.3644999999999996 12.3644999999999996, 12.3643000000000001 12.3643000000000001, 12.3595000000000006 12.3595000000000006, 12.3496000000000006 12.3496000000000006, 12.3300000000000001 12.3300000000000001, 12.3099000000000007 12.3099000000000007, 12.3071000000000002 12.3071000000000002, 12.2764000000000006 12.2764000000000006, 12.2378999999999998 12.2378999999999998, 12.2103000000000002 12.2103000000000002, 12.2035000000000000 12.2035000000000000, 12.2012000000000000 12.2012000000000000, 12.2004000000000001 12.2004000000000001, 12.2002000000000006 12.2002000000000006, 12.1531000000000002 12.1531000000000002, 12.1349999999999998 12.1349999999999998, 12.1460000000000008 12.1460000000000008, 12.1562000000000001 12.1562000000000001, 12.1775000000000002 12.1775000000000002, 12.2690000000000001 12.2690000000000001, 12.2932000000000006 12.2932000000000006, 12.3576999999999995 12.3576999999999995, 12.3603000000000005 12.3603000000000005, 12.3619000000000003 12.3619000000000003, 12.3671000000000006 12.3671000000000006, 12.3914000000000009 12.3914000000000009, 12.3948000000000000 12.3948000000000000, 12.4015000000000004 12.4015000000000004, 12.4022000000000006 12.4022000000000006, 12.4031000000000002 12.4031000000000002, 12.4092000000000002 12.4092000000000002, 12.4100000000000001 12.4100000000000001, 12.4245999999999999 12.4245999999999999, 12.4748000000000001 12.4748000000000001, 12.5008999999999997 12.5008999999999997, 12.5230999999999995 12.5230999999999995, 12.4834999999999994 12.4834999999999994, 12.4014000000000006 12.4014000000000006, 12.3422000000000001 12.3422000000000001, 12.2683999999999997 12.2683999999999997, 12.2523000000000000 12.2523000000000000, 12.2052999999999994 12.2052999999999994, 12.1747999999999994 12.1747999999999994, 12.1659000000000006 12.1659000000000006, 12.0831999999999997 12.0831999999999997, 12.0973000000000006 12.0973000000000006, 12.1114999999999995 12.1114999999999995, 12.1475000000000009 12.1475000000000009, 12.1674000000000007 12.1674000000000007, 12.1799999999999997 12.1799999999999997, 12.1578999999999997 12.1578999999999997, 12.1547000000000001 12.1547000000000001, 12.1377000000000006 12.1377000000000006, 12.1273000000000000 12.1273000000000000, 12.1136999999999997 12.1136999999999997, 12.1049000000000007 12.1049000000000007, 12.0762000000000000 12.0762000000000000, 12.0408000000000008 12.0408000000000008, 12.0289000000000001 12.0289000000000001, 12.0053000000000001 12.0053000000000001, 11.5030999999999999 11.5030999999999999, 11.4595000000000002 11.4595000000000002, 11.4351000000000003 11.4351000000000003, 11.4131000000000000 11.4131000000000000, 11.4105000000000008 11.4105000000000008, 11.4016000000000002 11.4016000000000002, 11.3338999999999999 11.3338999999999999, 11.3102000000000000 11.3102000000000000, 11.2943999999999996 11.2943999999999996, 11.2820000000000000 11.2820000000000000, 11.2614000000000001 11.2614000000000001, 11.2262000000000004 11.2262000000000004, 11.1989999999999998 11.1989999999999998, 11.1722000000000001 11.1722000000000001, 11.1541999999999994 11.1541999999999994, 11.1410999999999998 11.1410999999999998, 11.1212000000000000 11.1212000000000000, 11.1183999999999994 11.1183999999999994, 11.1158000000000001 11.1158000000000001, 11.0975000000000001 11.0975000000000001, 11.0960999999999999 11.0960999999999999, 11.0808000000000000 11.0808000000000000, 11.0746000000000002 11.0746000000000002, 11.0474999999999994 11.0474999999999994, 11.0265000000000004 11.0265000000000004, 10.5929000000000002 10.5929000000000002, 10.5533000000000001 10.5533000000000001, 10.5266000000000002 10.5266000000000002, 10.5044000000000004 10.5044000000000004, 10.4803999999999995 10.4803999999999995, 10.4611000000000001 10.4611000000000001, 10.4443999999999999 10.4443999999999999, 10.4323999999999995 10.4323999999999995, 10.4253000000000000 10.4253000000000000, 10.4036000000000008 10.4036000000000008, 10.3887999999999998 10.3887999999999998, 10.3551000000000002 10.3551000000000002, 10.2651000000000003 10.2651000000000003, 10.1950000000000003 10.1950000000000003, 10.0977999999999994 10.0977999999999994, 10.0985999999999994 10.0985999999999994, 10.0891000000000002 10.0891000000000002, 10.0701000000000001 10.0701000000000001, 10.0625000000000000 10.0625000000000000, 10.0519999999999996 10.0519999999999996, 10.0418000000000003 10.0418000000000003, 10.0320000000000000 10.0320000000000000, 10.0152999999999999 10.0152999999999999, 10.0236000000000001 10.0236000000000001, 10.0036000000000005 10.0036000000000005, 10.0154999999999994 10.0154999999999994, 10.0586000000000002 10.0586000000000002, 10.0470000000000006 10.0470000000000006, 9.5684000000000005 9.5684000000000005, 9.5724000000000000 9.5724000000000000, 9.5619999999999994 9.5619999999999994, 9.5327999999999999 9.5327999999999999, 9.4989000000000008 9.4989000000000008, 9.4946999999999999 9.4946999999999999, 9.4999000000000002 9.4999000000000002, 9.4916000000000000 9.4916000000000000, 9.4992999999999999 9.4992999999999999, 9.4707000000000008 9.4707000000000008, 9.4619000000000000 9.4619000000000000, 9.3635000000000002 9.3635000000000002, 9.3094000000000001 9.3094000000000001, 9.2887000000000004 9.2887000000000004, 9.1706000000000003 9.1706000000000003, 9.1320999999999994 9.1320999999999994, 9.0312000000000001 9.0312000000000001, 9.0073000000000008 9.0073000000000008, 8.5845000000000002 8.5845000000000002, 8.5457000000000001 8.5457000000000001, 8.5321999999999996 8.5321999999999996, 8.5152000000000001 8.5152000000000001, 8.4662000000000006 8.4662000000000006, 8.4277999999999995 8.4277999999999995, 8.3767999999999994 8.3767999999999994, 8.3216000000000001 8.3216000000000001, 8.2756000000000007 8.2756000000000007, 8.1798999999999999 8.1798999999999999, 8.1211000000000002 8.1211000000000002, 8.1079000000000008 8.1079000000000008, 8.0799000000000003 8.0799000000000003, 8.0640000000000001 8.0640000000000001, 7.5899000000000001 7.5899000000000001, 7.5890000000000004 7.5890000000000004, 7.5235000000000003 7.5235000000000003, 7.4964000000000004 7.4964000000000004, 7.4413000000000000 7.4413000000000000, 7.3978000000000002 7.3978000000000002, 7.3494999999999999 7.3494999999999999, 7.3813000000000004 7.3813000000000004, 7.3432000000000004 7.3432000000000004, 7.3315000000000001 7.3315000000000001, 7.3033999999999999 7.3033999999999999, 7.2769000000000004 7.2769000000000004, 7.2499000000000002 7.2499000000000002, 7.2423999999999999 7.2423999999999999, 7.2092000000000001 7.2092000000000001, 7.2111000000000001 7.2111000000000001, 7.2339000000000002 7.2339000000000002, 7.2335000000000003 7.2335000000000003, 7.2453000000000003 7.2453000000000003, 7.2488999999999999 7.2488999999999999, 7.2759000000000000 7.2759000000000000, 7.2888999999999999 7.2888999999999999, 7.3075000000000001 7.3075000000000001, 7.3083000000000000 7.3083000000000000, 7.3589000000000002 7.3589000000000002, 7.4099000000000004 7.4099000000000004, 7.4523999999999999 7.4523999999999999, 7.4973000000000001 7.4973000000000001, 7.5456000000000003 7.5456000000000003, 7.5438999999999998 7.5438999999999998, 7.5346000000000002 7.5346000000000002, 7.5605000000000002 7.5605000000000002, 7.5670000000000002 7.5670000000000002, 8.0075000000000003 8.0075000000000003, 8.0707000000000004 8.0707000000000004, 8.1158000000000001 8.1158000000000001, 8.1562000000000001 8.1562000000000001, 8.1640999999999995 8.1640999999999995, 8.1723999999999997 8.1723999999999997, 8.1819000000000006 8.1819000000000006, 8.1928999999999998 8.1928999999999998, 8.1820000000000004 8.1820000000000004, 8.1662999999999997 8.1662999999999997, 8.1293000000000006 8.1293000000000006, 8.1143000000000001 8.1143000000000001, 8.0905000000000005 8.0905000000000005, 8.0929000000000002 8.0929000000000002, 8.1006000000000000 8.1006000000000000, 8.1196000000000002 8.1196000000000002, 8.1288000000000000 8.1288000000000000, 8.1319999999999997 8.1319999999999997, 8.1480999999999995 8.1480999999999995, 8.1478000000000002 8.1478000000000002, 8.1394000000000002 8.1394000000000002, 8.1265000000000001 8.1265000000000001, 8.1066000000000003 8.1066000000000003, 8.0846999999999998 8.0846999999999998, 8.0815000000000001 8.0815000000000001, 8.0404999999999998 8.0404999999999998, 8.0309000000000008 8.0309000000000008, 8.0030999999999999 8.0030999999999999, 8.0051000000000005 8.0051000000000005, 8.0153999999999996 8.0153999999999996, 8.0306999999999995 8.0306999999999995, 8.0347000000000008 8.0347000000000008, 8.0259000000000000 8.0259000000000000, 8.0282999999999998 8.0282999999999998, 8.0416000000000007 8.0416000000000007, 8.0822000000000003 8.0822000000000003, 8.1067000000000000 8.1067000000000000, 8.1513000000000009 8.1513000000000009, 8.1323000000000008 8.1323000000000008, 8.1681000000000008 8.1681000000000008, 8.1570000000000000 8.1570000000000000, 8.1408000000000005 8.1408000000000005, 8.1326000000000001 8.1326000000000001, 8.1387000000000000 8.1387000000000000, 8.1340000000000003 8.1340000000000003, 8.1105999999999998 8.1105999999999998, 8.0907999999999998 8.0907999999999998, 8.0266000000000002 8.0266000000000002, 8.0076999999999998 8.0076999999999998, 7.5625000000000000 7.5625000000000000, 7.5285000000000002 7.5285000000000002, 7.5095000000000001 7.5095000000000001, 7.4828000000000001 7.4828000000000001, 7.4694000000000003 7.4694000000000003, 7.4519000000000002 7.4519000000000002, 7.4226000000000001 7.4226000000000001, 7.4314000000000000 7.4314000000000000, 7.4351000000000003 7.4351000000000003, 7.4131000000000000 7.4131000000000000, 7.3726000000000003 7.3726000000000003, 7.2777000000000003 7.2777000000000003, 7.3281000000000001 7.3281000000000001, 7.3803000000000001 7.3803000000000001, 7.3703000000000003 7.3703000000000003, 7.3776999999999999 7.3776999999999999, 7.3971000000000000 7.3971000000000000, 7.4264000000000001 7.4264000000000001, 7.4104000000000001 7.4104000000000001, 7.4036000000000000 7.4036000000000000, 7.3662000000000001 7.3662000000000001, 7.3487000000000000 7.3487000000000000, 7.2953000000000001 7.2953000000000001, 7.3910000000000000 7.3910000000000000, 7.4653000000000000 7.4653000000000000, 7.4851999999999999 7.4851999999999999, 7.5148000000000001 7.5148000000000001, 7.5541999999999998 7.5541999999999998, 8.0089000000000006 8.0089000000000006, 8.0524000000000004 8.0524000000000004, 8.0632000000000001 8.0632000000000001, 8.1273999999999997 8.1273999999999997, 8.1722000000000001 8.1722000000000001, 8.2247000000000003 8.2247000000000003, 8.2763000000000009 8.2763000000000009, 8.3086000000000002 8.3086000000000002, 8.4390999999999998 8.4390999999999998, 8.4735999999999994 8.4735999999999994, 8.4901999999999997 8.4901999999999997, 8.5114999999999998 8.5114999999999998, 8.5425000000000004 8.5425000000000004, 8.5775000000000006 8.5775000000000006, 8.5798000000000005 8.5798000000000005, 8.5812000000000008 8.5812000000000008, 8.5889000000000006 8.5889000000000006, 8.5898000000000003 8.5898000000000003, 8.5975000000000001 8.5975000000000001, 8.5922999999999998 8.5922999999999998, 8.5945999999999998 8.5945999999999998, 9.0190999999999999 9.0190999999999999, 9.0367999999999995 9.0367999999999995, 9.0649999999999995 9.0649999999999995, 9.0840999999999994 9.0840999999999994, 9.1127000000000002 9.1127000000000002, 9.1084999999999994 9.1084999999999994, 9.1041000000000007 9.1041000000000007, 9.1113000000000000 9.1113000000000000, 9.2058999999999997 9.2058999999999997, 9.2179000000000002 9.2179000000000002, 9.1983999999999995 9.1983999999999995, 9.2383000000000006 9.2383000000000006, 9.2744000000000000 9.2744000000000000, 9.2766000000000002 9.2766000000000002, 9.3099000000000007 9.3099000000000007, 9.2829999999999995 9.2829999999999995, 9.2820000000000000 9.2820000000000000, 9.3368000000000002 9.3368000000000002, 9.3538999999999994 9.3538999999999994, 9.3755000000000006 9.3755000000000006, 9.3932000000000002 9.3932000000000002, 9.4209999999999994 9.4209999999999994, 9.4640000000000004 9.4640000000000004, 9.4646000000000008 9.4646000000000008, 9.4533000000000005 9.4533000000000005, 9.4901000000000000 9.4901000000000000, 9.5129000000000001 9.5129000000000001, 9.5236999999999998 9.5236999999999998, 9.5495999999999999 9.5495999999999999, 9.5236999999999998 9.5236999999999998, 9.5129000000000001 9.5129000000000001, 9.4901000000000000 9.4901000000000000, 9.4532000000000007 9.4532000000000007, 9.4643999999999995 9.4643999999999995, 9.4639000000000006 9.4639000000000006, 9.4581999999999997 9.4581999999999997, 9.4641000000000002 9.4641000000000002, 9.4481999999999999 9.4481999999999999, 9.5168999999999997 9.5168999999999997, 9.5264000000000006 9.5264000000000006, 9.5145999999999997 9.5145999999999997, 9.5221000000000000 9.5221000000000000, 9.5373000000000001 9.5373000000000001, 9.5320000000000000 9.5320000000000000, 9.4991000000000003 9.4991000000000003, 9.4930000000000003 9.4930000000000003, 9.5091000000000001 9.5091000000000001, 9.5128000000000004 9.5128000000000004, 9.5098000000000003 9.5098000000000003, 9.5039999999999996 9.5039999999999996, 9.5017999999999994 9.5017999999999994, 9.4867000000000008 9.4867000000000008, 9.4951000000000008 9.4951000000000008, 9.5000999999999998 9.5000999999999998, 9.5020000000000007 9.5020000000000007, 9.5009999999999994 9.5009999999999994, 9.4741000000000000 9.4741000000000000, 9.4693000000000005 9.4693000000000005, 9.4585000000000008 9.4585000000000008, 9.4593000000000007 9.4593000000000007, 9.4678000000000004 9.4678000000000004, 9.4708000000000006 9.4708000000000006, 10.0289000000000001 10.0289000000000001, 10.1348000000000003 10.1348000000000003, 10.3917999999999999 10.3917999999999999))");

    metno::s3::GeometryType lhs_type = lhs->getGeometryType();
    boost::shared_ptr<metno::s3::GeometryLL> corrected_lhs = lhs;
    if(!lhs->isValid()) {
        corrected_lhs = lhs->Buffer(1.0/100000000.0);
//        lhs->simplifyTP(1.0/10000.0);
    }
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" corrected_lhs isEmpty "<< (corrected_lhs->isEmpty()?"TRUE":"FALSE") <<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" corrected_lhs isValid "<< (corrected_lhs->isValid()?"TRUE":"FALSE") <<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" corrected_lhs isSimple "<< (corrected_lhs->isSimple()?"TRUE":"FALSE") <<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" corrected_lhs GEOMETRY TYPE: "<<corrected_lhs->getGeometryType()<<std::endl;

    boost::shared_ptr<metno::s3::GeometryLL> rhs =
            metno::s3::GeometryLL::fromWKT("POLYGON ((9.1335999999999995 9.1335999999999995, 9.1671999999999993 9.1671999999999993, 9.1795000000000009 9.1795000000000009, 9.1860999999999997 9.1860999999999997, 9.2041000000000004 9.2041000000000004, 9.2216000000000005 9.2216000000000005, 9.3569999999999993 9.3569999999999993, 9.4708000000000006 9.4708000000000006, 9.4678000000000004 9.4678000000000004, 9.4593000000000007 9.4593000000000007, 9.4585000000000008 9.4585000000000008, 9.4693000000000005 9.4693000000000005, 9.4741000000000000 9.4741000000000000, 9.5010999999999992 9.5010999999999992, 9.5020000000000007 9.5020000000000007, 9.5001999999999995 9.5001999999999995, 9.4951000000000008 9.4951000000000008, 9.4867000000000008 9.4867000000000008, 9.5018999999999991 9.5018999999999991, 9.5040999999999993 9.5040999999999993, 9.5098000000000003 9.5098000000000003, 9.5128000000000004 9.5128000000000004, 9.5092999999999996 9.5092999999999996, 9.4931000000000001 9.4931000000000001, 9.4992000000000001 9.4992000000000001, 9.5320000000000000 9.5320000000000000, 9.5373000000000001 9.5373000000000001, 9.5221999999999998 9.5221999999999998, 9.5147999999999993 9.5147999999999993, 9.5265000000000004 9.5265000000000004, 9.5169999999999995 9.5169999999999995, 9.4482999999999997 9.4482999999999997, 9.4641999999999999 9.4641999999999999, 9.4583999999999993 9.4583999999999993, 9.4640000000000004 9.4640000000000004, 9.4210999999999991 9.4210999999999991, 9.3932000000000002 9.3932000000000002, 9.3755000000000006 9.3755000000000006, 9.3539999999999992 9.3539999999999992, 9.3369000000000000 9.3369000000000000, 9.2820000000000000 9.2820000000000000, 9.2830999999999992 9.2830999999999992, 9.3099000000000007 9.3099000000000007, 9.2766000000000002 9.2766000000000002, 9.2744999999999997 9.2744999999999997, 9.2383000000000006 9.2383000000000006, 9.1984999999999992 9.1984999999999992, 9.2180000000000000 9.2180000000000000, 9.2059999999999995 9.2059999999999995, 9.1113999999999997 9.1113999999999997, 9.1041000000000007 9.1041000000000007, 9.1085999999999991 9.1085999999999991, 9.1127000000000002 9.1127000000000002, 9.0841999999999992 9.0841999999999992, 9.0650999999999993 9.0650999999999993, 9.0368999999999993 9.0368999999999993, 9.0191999999999997 9.0191999999999997, 8.5946999999999996 8.5946999999999996, 8.5923999999999996 8.5923999999999996, 8.5975999999999999 8.5975999999999999, 8.5898000000000003 8.5898000000000003, 8.5889000000000006 8.5889000000000006, 8.5812000000000008 8.5812000000000008, 8.5798000000000005 8.5798000000000005, 8.5775000000000006 8.5775000000000006, 8.5425000000000004 8.5425000000000004, 8.5115999999999996 8.5115999999999996, 8.4902999999999995 8.4902999999999995, 8.4736999999999991 8.4736999999999991, 8.4391999999999996 8.4391999999999996, 8.3086000000000002 8.3086000000000002, 8.2763000000000009 8.2763000000000009, 8.2247000000000003 8.2247000000000003, 8.1722999999999999 8.1722999999999999, 8.1274999999999995 8.1274999999999995, 8.0632000000000001 8.0632000000000001, 8.0524000000000004 8.0524000000000004, 8.0089000000000006 8.0089000000000006, 7.5542999999999996 7.5542999999999996, 7.5148000000000001 7.5148000000000001, 7.4852999999999996 7.4852999999999996, 7.4653999999999998 7.4653999999999998, 7.3910999999999998 7.3910999999999998, 7.2953000000000001 7.2953000000000001, 7.2625999999999999 7.2625999999999999, 7.2619999999999996 7.2619999999999996, 7.2222000000000000 7.2222000000000000, 7.1978999999999997 7.1978999999999997, 7.1680999999999999 7.1680999999999999, 7.1368000000000000 7.1368000000000000, 7.1132999999999997 7.1132999999999997, 7.0907000000000000 7.0907000000000000, 7.0867000000000004 7.0867000000000004, 7.0952999999999999 7.0952999999999999, 7.0853000000000002 7.0853000000000002, 7.0560000000000000 7.0560000000000000, 7.0616000000000003 7.0616000000000003, 7.0678999999999998 7.0678999999999998, 7.0640999999999998 7.0640999999999998, 7.1279000000000003 7.1279000000000003, 7.1504000000000003 7.1504000000000003, 7.1833000000000000 7.1833000000000000, 7.1962000000000002 7.1962000000000002, 7.2319000000000004 7.2319000000000004, 7.2430000000000003 7.2430000000000003, 7.2629999999999999 7.2629999999999999, 7.2866999999999997 7.2866999999999997, 7.3121000000000000 7.3121000000000000, 7.3192000000000004 7.3192000000000004, 7.3083999999999998 7.3083999999999998, 7.3212000000000002 7.3212000000000002, 7.3509000000000002 7.3509000000000002, 7.3551000000000002 7.3551000000000002, 7.3715000000000002 7.3715000000000002, 7.3449999999999998 7.3449999999999998, 7.3460000000000001 7.3460000000000001, 7.3297999999999996 7.3297999999999996, 7.3239000000000001 7.3239000000000001, 7.3571000000000000 7.3571000000000000, 7.3682999999999996 7.3682999999999996, 7.3967999999999998 7.3967999999999998, 7.4177999999999997 7.4177999999999997, 7.4321000000000002 7.4321000000000002, 7.4527000000000001 7.4527000000000001, 7.4644000000000004 7.4644000000000004, 7.4492000000000003 7.4492000000000003, 7.4512999999999998 7.4512999999999998, 7.4382999999999999 7.4382999999999999, 7.4446000000000003 7.4446000000000003, 7.4783999999999997 7.4783999999999997, 7.4950999999999999 7.4950999999999999, 7.5279999999999996 7.5279999999999996, 7.5420999999999996 7.5420999999999996, 7.5480000000000000 7.5480000000000000, 7.5572999999999997 7.5572999999999997, 7.5648999999999997 7.5648999999999997, 7.5894000000000004 7.5894000000000004, 8.0015000000000001 8.0015000000000001, 8.0289999999999999 8.0289999999999999, 8.0726999999999993 8.0726999999999993, 8.0785000000000000 8.0785000000000000, 8.0431000000000008 8.0431000000000008, 8.0716000000000001 8.0716000000000001, 8.1280000000000001 8.1280000000000001, 8.1776999999999997 8.1776999999999997, 8.1959999999999997 8.1959999999999997, 8.2330000000000005 8.2330000000000005, 8.2817000000000007 8.2817000000000007, 8.3036999999999992 8.3036999999999992, 8.3417999999999992 8.3417999999999992, 8.3725000000000005 8.3725000000000005, 8.3939000000000004 8.3939000000000004, 8.4331999999999994 8.4331999999999994, 8.4446999999999992 8.4446999999999992, 8.4719999999999995 8.4719999999999995, 8.4735999999999994 8.4735999999999994, 8.4717000000000002 8.4717000000000002, 8.4722000000000008 8.4722000000000008, 8.4972999999999992 8.4972999999999992, 8.4505999999999997 8.4505999999999997, 8.4589999999999996 8.4589999999999996, 8.4984999999999999 8.4984999999999999, 8.4985999999999997 8.4985999999999997, 8.5602999999999998 8.5602999999999998, 8.5970999999999993 8.5970999999999993, 9.0190000000000001 9.0190000000000001, 9.0440000000000005 9.0440000000000005, 9.0877999999999997 9.0877999999999997, 9.0937000000000001 9.0937000000000001, 9.1099999999999994 9.1099999999999994, 9.1142000000000003 9.1142000000000003, 9.1141000000000005 9.1141000000000005, 9.1152999999999995 9.1152999999999995, 9.1221999999999994 9.1221999999999994, 9.1174999999999997 9.1174999999999997, 9.1335999999999995 9.1335999999999995))");

    metno::s3::GeometryType rhs_type = rhs->getGeometryType();

    if(!rhs->isValid()) {
        boost::shared_ptr<metno::s3::GeometryLL> tmp = rhs->makeValid();
        if(!tmp->isValid() || tmp->getGeometryType() != rhs_type) {
            rhs = rhs->Buffer(1.0/100000000.0);
//            rhs->simplifyTP(1.0/10000.0);
        } else {
            rhs = tmp;
        }
    }
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" rhs isEmpty "<< (rhs->isEmpty()?"TRUE":"FALSE") <<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" rhs isValid "<< (rhs->isValid()?"TRUE":"FALSE") <<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" rhs isSimple "<< (rhs->isSimple()?"TRUE":"FALSE") <<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" rhs GEOMETRY TYPE: "<<rhs->getGeometryType()<<std::endl;

    boost::shared_ptr<metno::s3::GeometryLL> uni = corrected_lhs->Union(rhs);
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" union WKT "<<uni->toWKT()<<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" union isEmpty "<< (uni->isEmpty()?"TRUE":"FALSE") <<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" union isValid "<< (uni->isValid()?"TRUE":"FALSE") <<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" union isSimple "<< (uni->isSimple()?"TRUE":"FALSE") <<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" union NUM VERTICES  "<< uni->getNumVertices() <<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" union NUM GEOMETRIES  "<< uni->getNumGeometries() <<std::endl;

//    metno::s3::CoordinatePtrSequence poly_coordinates;
//    poly_coordinates.push_back(metno::s3::CoordinatePtr(new metno::s3::Coordinate(0, 0)));
//    poly_coordinates.push_back(metno::s3::CoordinatePtr(new metno::s3::Coordinate(0, 100)));
//    poly_coordinates.push_back(metno::s3::CoordinatePtr(new metno::s3::Coordinate(100, 100)));
//    poly_coordinates.push_back(metno::s3::CoordinatePtr(new metno::s3::Coordinate(100, 0)));
//    poly_coordinates.push_back(metno::s3::CoordinatePtr(new metno::s3::Coordinate(0, 0)));

//    boost::shared_ptr<metno::s3::GeometryLL> poly = metno::s3::GeometryLL::createPolygon(poly_coordinates);
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" poly WKT "<<poly->toWKT()<<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" poly isEmpty "<< (poly->isEmpty()?"TRUE":"FALSE") <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" poly isValid "<< (poly->isValid()?"TRUE":"FALSE") <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" poly isSimple "<< (poly->isSimple()?"TRUE":"FALSE") <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" poly NUM VERTICES  "<< poly->getNumVertices() <<std::endl;
//    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" poly NUM GEOMETRIES  "<< poly->getNumGeometries() <<std::endl;

    metno::s3::CoordinatePtrSequence line_coordinates;
    line_coordinates.push_back(metno::s3::CoordinatePtr(new metno::s3::Coordinate(0, 0)));
    line_coordinates.push_back(metno::s3::CoordinatePtr(new metno::s3::Coordinate(100, 100)));

    boost::shared_ptr<metno::s3::GeometryLL> line = metno::s3::GeometryLL::createLineString(line_coordinates);
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" line WKT "<<line->toWKT()<<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" line isEmpty "<< (line->isEmpty()?"TRUE":"FALSE") <<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" line isValid "<< (line->isValid()?"TRUE":"FALSE") <<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" line isSimple "<< (line->isSimple()?"TRUE":"FALSE") <<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" line NUM VERTICES  "<< line->getNumVertices() <<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" line NUM GEOMETRIES  "<< line->getNumGeometries() <<std::endl;

    boost::shared_ptr<metno::s3::GeometryLL> parts = corrected_lhs->splitBy(line);
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" parts WKT "<<parts->toWKT()<<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" parts isEmpty "<< (parts->isEmpty()?"TRUE":"FALSE") <<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" parts isValid "<< (parts->isValid()?"TRUE":"FALSE") <<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" parts isSimple "<< (parts->isSimple()?"TRUE":"FALSE") <<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" parts NUM VERTICES  "<< parts->getNumVertices() <<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" parts NUM GEOMETRIES  "<< parts->getNumGeometries() <<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" parts coverdBy corrected_lhs "<<(parts->coveredBy(corrected_lhs)?"TRUE":"FALSE")<<std::endl;
    std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" parts coverdBy lhs "<<(parts->coveredBy(lhs)?"TRUE":"FALSE")<<std::endl;


        boost::shared_ptr<metno::s3::GeometryLL> mpoly =
                metno::s3::GeometryLL::fromWKT("MULTIPOLYGON (((10 10, 10 20, 20 20, 20 10, 10 10)), ((40 40, 40 50, 50 50, 50 40, 40 40)), ((25 25, 25 35, 35 35, 35 25, 25 25)))");

        for(size_t  i = 0; i < mpoly->getNumGeometries(); ++i) {
            boost::shared_ptr<metno::s3::GeometryLL> tmp = mpoly->getGeometryN(i);
            std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" mpart "<< i << " WKT " <<tmp->getEnvelope().toString()<<std::endl;
        }
    //    boost::shared_ptr<metno::s3::GeometryLL> mpoly = metno::s3::GeometryLL::fromWKT("MULTIPOLYGON (((10 10, 10 20, 20 20, 20 10, 10 10)), ((30 30, 30 50, 50 50, 50 30, 30 30)))");
    //    boost::shared_ptr<metno::s3::GeometryLL> mpoly = metno::s3::GeometryLL::fromWKT("POLYGON ((30 30, 30 50, 50 50, 50 30, 30 30))");
//        std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" mpoly WKT "<<mpoly->toWKT()<<std::endl;
//        std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" mpoly isEmpty "<< (mpoly->isEmpty()?"TRUE":"FALSE") <<std::endl;
//        std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" mpoly isValid "<< (mpoly->isValid()?"TRUE":"FALSE") <<std::endl;
//        std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" mpoly isSimple "<< (mpoly->isSimple()?"TRUE":"FALSE") <<std::endl;
//        std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" mpoly NUM VERTICES  "<< mpoly->getNumVertices() <<std::endl;
//        std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" mpoly NUM GEOMETRIES  "<< mpoly->getNumGeometries() <<std::endl;

//        boost::shared_ptr<metno::s3::GeometryLL> mparts = mpoly->splitBy(line);
//        std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" mparts WKT "<<mparts->toWKT()<<std::endl;
//        std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" mparts isEmpty "<< (mparts->isEmpty()?"TRUE":"FALSE") <<std::endl;
//        std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" mparts isValid "<< (mparts->isValid()?"TRUE":"FALSE") <<std::endl;
//        std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" mparts isSimple "<< (mparts->isSimple()?"TRUE":"FALSE") <<std::endl;
//        std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" mparts NUM VERTICES  "<< mparts->getNumVertices() <<std::endl;
//        std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" mparts NUM GEOMETRIES  "<< mparts->getNumGeometries() <<std::endl;

//        if(mparts.get() && mparts->getGeometryType() == metno::s3::S3_GEOMETRYCOLLECTION && mparts->getNumGeometries() >= 2) {
//            std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" SPLIT SUCCESS "<<std::endl;
//            boost::shared_ptr<metno::s3::GeometryLL> l = mparts->getGeometryN(0);
//            boost::shared_ptr<metno::s3::GeometryLL> r = mparts->getGeometryN(1);

//            metno::s3::Envelope mparts_env = mparts->getEnvelope();
//            metno::s3::Envelope l_env = l->getEnvelope();
//            metno::s3::Envelope r_env = r->getEnvelope();

//            std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" mparts_env WKT "<<mparts_env.toString()<<std::endl;
//            std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" l_env WKT "<<l_env.toString()<<std::endl;
//            std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" r_env WKT "<<r_env.toString()<<std::endl;
//        } else {
//            std::cerr<<"["<<__FILE__<<"]"<<__FUNCTION__<<"@"<<__LINE__<<" SPLIT FAILURE "<<std::endl;
//        }

        return 0;
    }

    //SELECT ST_GeomFromText('POLYGON ((9.1335999999999995 9.1335999999999995, 9.1671999999999993 9.1671999999999993, 9.1795000000000009 9.1795000000000009, 9.1860999999999997 9.1860999999999997, 9.2041000000000004 9.2041000000000004, 9.2216000000000005 9.2216000000000005, 9.3569999999999993 9.3569999999999993, 9.4708000000000006 9.4708000000000006, 9.4678000000000004 9.4678000000000004, 9.4593000000000007 9.4593000000000007, 9.4585000000000008 9.4585000000000008, 9.4693000000000005 9.4693000000000005, 9.4741000000000000 9.4741000000000000, 9.5010999999999992 9.5010999999999992, 9.5020000000000007 9.5020000000000007, 9.5001999999999995 9.5001999999999995, 9.4951000000000008 9.4951000000000008, 9.4867000000000008 9.4867000000000008, 9.5018999999999991 9.5018999999999991, 9.5040999999999993 9.5040999999999993, 9.5098000000000003 9.5098000000000003, 9.5128000000000004 9.5128000000000004, 9.5092999999999996 9.5092999999999996, 9.4931000000000001 9.4931000000000001, 9.4992000000000001 9.4992000000000001, 9.5320000000000000 9.5320000000000000, 9.5373000000000001 9.5373000000000001, 9.5221999999999998 9.5221999999999998, 9.5147999999999993 9.5147999999999993, 9.5265000000000004 9.5265000000000004, 9.5169999999999995 9.5169999999999995, 9.4482999999999997 9.4482999999999997, 9.4641999999999999 9.4641999999999999, 9.4583999999999993 9.4583999999999993, 9.4640000000000004 9.4640000000000004, 9.4210999999999991 9.4210999999999991, 9.3932000000000002 9.3932000000000002, 9.3755000000000006 9.3755000000000006, 9.3539999999999992 9.3539999999999992, 9.3369000000000000 9.3369000000000000, 9.2820000000000000 9.2820000000000000, 9.2830999999999992 9.2830999999999992, 9.3099000000000007 9.3099000000000007, 9.2766000000000002 9.2766000000000002, 9.2744999999999997 9.2744999999999997, 9.2383000000000006 9.2383000000000006, 9.1984999999999992 9.1984999999999992, 9.2180000000000000 9.2180000000000000, 9.2059999999999995 9.2059999999999995, 9.1113999999999997 9.1113999999999997, 9.1041000000000007 9.1041000000000007, 9.1085999999999991 9.1085999999999991, 9.1127000000000002 9.1127000000000002, 9.0841999999999992 9.0841999999999992, 9.0650999999999993 9.0650999999999993, 9.0368999999999993 9.0368999999999993, 9.0191999999999997 9.0191999999999997, 8.5946999999999996 8.5946999999999996, 8.5923999999999996 8.5923999999999996, 8.5975999999999999 8.5975999999999999, 8.5898000000000003 8.5898000000000003, 8.5889000000000006 8.5889000000000006, 8.5812000000000008 8.5812000000000008, 8.5798000000000005 8.5798000000000005, 8.5775000000000006 8.5775000000000006, 8.5425000000000004 8.5425000000000004, 8.5115999999999996 8.5115999999999996, 8.4902999999999995 8.4902999999999995, 8.4736999999999991 8.4736999999999991, 8.4391999999999996 8.4391999999999996, 8.3086000000000002 8.3086000000000002, 8.2763000000000009 8.2763000000000009, 8.2247000000000003 8.2247000000000003, 8.1722999999999999 8.1722999999999999, 8.1274999999999995 8.1274999999999995, 8.0632000000000001 8.0632000000000001, 8.0524000000000004 8.0524000000000004, 8.0089000000000006 8.0089000000000006, 7.5542999999999996 7.5542999999999996, 7.5148000000000001 7.5148000000000001, 7.4852999999999996 7.4852999999999996, 7.4653999999999998 7.4653999999999998, 7.3910999999999998 7.3910999999999998, 7.2953000000000001 7.2953000000000001, 7.2625999999999999 7.2625999999999999, 7.2619999999999996 7.2619999999999996, 7.2222000000000000 7.2222000000000000, 7.1978999999999997 7.1978999999999997, 7.1680999999999999 7.1680999999999999, 7.1368000000000000 7.1368000000000000, 7.1132999999999997 7.1132999999999997, 7.0907000000000000 7.0907000000000000, 7.0867000000000004 7.0867000000000004, 7.0952999999999999 7.0952999999999999, 7.0853000000000002 7.0853000000000002, 7.0560000000000000 7.0560000000000000, 7.0616000000000003 7.0616000000000003, 7.0678999999999998 7.0678999999999998, 7.0640999999999998 7.0640999999999998, 7.1279000000000003 7.1279000000000003, 7.1504000000000003 7.1504000000000003, 7.1833000000000000 7.1833000000000000, 7.1962000000000002 7.1962000000000002, 7.2319000000000004 7.2319000000000004, 7.2430000000000003 7.2430000000000003, 7.2629999999999999 7.2629999999999999, 7.2866999999999997 7.2866999999999997, 7.3121000000000000 7.3121000000000000, 7.3192000000000004 7.3192000000000004, 7.3083999999999998 7.3083999999999998, 7.3212000000000002 7.3212000000000002, 7.3509000000000002 7.3509000000000002, 7.3551000000000002 7.3551000000000002, 7.3715000000000002 7.3715000000000002, 7.3449999999999998 7.3449999999999998, 7.3460000000000001 7.3460000000000001, 7.3297999999999996 7.3297999999999996, 7.3239000000000001 7.3239000000000001, 7.3571000000000000 7.3571000000000000, 7.3682999999999996 7.3682999999999996, 7.3967999999999998 7.3967999999999998, 7.4177999999999997 7.4177999999999997, 7.4321000000000002 7.4321000000000002, 7.4527000000000001 7.4527000000000001, 7.4644000000000004 7.4644000000000004, 7.4492000000000003 7.4492000000000003, 7.4512999999999998 7.4512999999999998, 7.4382999999999999 7.4382999999999999, 7.4446000000000003 7.4446000000000003, 7.4783999999999997 7.4783999999999997, 7.4950999999999999 7.4950999999999999, 7.5279999999999996 7.5279999999999996, 7.5420999999999996 7.5420999999999996, 7.5480000000000000 7.5480000000000000, 7.5572999999999997 7.5572999999999997, 7.5648999999999997 7.5648999999999997, 7.5894000000000004 7.5894000000000004, 8.0015000000000001 8.0015000000000001, 8.0289999999999999 8.0289999999999999, 8.0726999999999993 8.0726999999999993, 8.0785000000000000 8.0785000000000000, 8.0431000000000008 8.0431000000000008, 8.0716000000000001 8.0716000000000001, 8.1280000000000001 8.1280000000000001, 8.1776999999999997 8.1776999999999997, 8.1959999999999997 8.1959999999999997, 8.2330000000000005 8.2330000000000005, 8.2817000000000007 8.2817000000000007, 8.3036999999999992 8.3036999999999992, 8.3417999999999992 8.3417999999999992, 8.3725000000000005 8.3725000000000005, 8.3939000000000004 8.3939000000000004, 8.4331999999999994 8.4331999999999994, 8.4446999999999992 8.4446999999999992, 8.4719999999999995 8.4719999999999995, 8.4735999999999994 8.4735999999999994, 8.4717000000000002 8.4717000000000002, 8.4722000000000008 8.4722000000000008, 8.4972999999999992 8.4972999999999992, 8.4505999999999997 8.4505999999999997, 8.4589999999999996 8.4589999999999996, 8.4984999999999999 8.4984999999999999, 8.4985999999999997 8.4985999999999997, 8.5602999999999998 8.5602999999999998, 8.5970999999999993 8.5970999999999993, 9.0190000000000001 9.0190000000000001, 9.0440000000000005 9.0440000000000005, 9.0877999999999997 9.0877999999999997, 9.0937000000000001 9.0937000000000001, 9.1099999999999994 9.1099999999999994, 9.1142000000000003 9.1142000000000003, 9.1141000000000005 9.1141000000000005, 9.1152999999999995 9.1152999999999995, 9.1221999999999994 9.1221999999999994, 9.1174999999999997 9.1174999999999997, 9.1335999999999995 9.1335999999999995))')

    //SELECT
    // ST_IsValid(
    //   SanitizeGeometry(
    //    ST_GeomFromText(
    //     'POLYGON ((10.0000000000000000 10.0000000000000000, 9.3300000000000001 9.3300000000000001, 9.1799999999999997 9.1799999999999997, 7.5099000000000000 7.5099000000000000, 9.3002000000000002 9.3002000000000002, 10.5998999999999999 10.5998999999999999, 11.1500000000000004 11.1500000000000004, 11.2399000000000004 11.2399000000000004, 11.4800000000000004 11.4800000000000004, 12.1500000000000004 12.1500000000000004, 12.4800000000000004 12.4800000000000004, 12.4770000000000003 12.4770000000000003, 12.3621999999999996 12.3621999999999996, 12.3042999999999996 12.3042999999999996, 12.5449999999999999 12.5449999999999999, 14.3292000000000002 14.3292000000000002, 15.0982000000000003 15.0982000000000003, 16.0376000000000012 16.0376000000000012, 16.2753000000000014 16.2753000000000014, 15.1198999999999995 15.1198999999999995, 12.3899000000000008 12.3899000000000008, 12.0899000000000001 12.0899000000000001, 11.2399000000000004 11.2399000000000004, 10.4499999999999993 10.4499999999999993, 10.0000000000000000 10.0000000000000000))'
    //    )
    //   )
    // ) As result

    //SELECT
    //   CompressGeometry(
    //    ST_GeomFromText(
    //     'POLYGON ((10.0000000000000000 10.0000000000000000, 9.3300000000000001 9.3300000000000001, 9.1799999999999997 9.1799999999999997, 7.5099000000000000 7.5099000000000000, 9.3002000000000002 9.3002000000000002, 10.5998999999999999 10.5998999999999999, 11.1500000000000004 11.1500000000000004, 11.2399000000000004 11.2399000000000004, 11.4800000000000004 11.4800000000000004, 12.1500000000000004 12.1500000000000004, 12.4800000000000004 12.4800000000000004, 12.4770000000000003 12.4770000000000003, 12.3621999999999996 12.3621999999999996, 12.3042999999999996 12.3042999999999996, 12.5449999999999999 12.5449999999999999, 14.3292000000000002 14.3292000000000002, 15.0982000000000003 15.0982000000000003, 16.0376000000000012 16.0376000000000012, 16.2753000000000014 16.2753000000000014, 15.1198999999999995 15.1198999999999995, 12.3899000000000008 12.3899000000000008, 12.0899000000000001 12.0899000000000001, 11.2399000000000004 11.2399000000000004, 10.4499999999999993 10.4499999999999993, 10.0000000000000000 10.0000000000000000))'
    //    )
    //   )
    // As result

    //SELECT
    //ST_Difference(
    // SimplifyPreserveTopology(
    //  ST_GeomFromText(
    //   'POLYGON ((10.0000000000000000 10.0000000000000000, 9.3300000000000001 9.3300000000000001, 9.1799999999999997 9.1799999999999997, 7.5099000000000000 7.5099000000000000, 9.3002000000000002 9.3002000000000002, 10.5998999999999999 10.5998999999999999, 11.1500000000000004 11.1500000000000004, 11.2399000000000004 11.2399000000000004, 11.4800000000000004 11.4800000000000004, 12.1500000000000004 12.1500000000000004, 12.4800000000000004 12.4800000000000004, 12.4770000000000003 12.4770000000000003, 12.3621999999999996 12.3621999999999996, 12.3042999999999996 12.3042999999999996, 12.5449999999999999 12.5449999999999999, 14.3292000000000002 14.3292000000000002, 15.0982000000000003 15.0982000000000003, 16.0376000000000012 16.0376000000000012, 16.2753000000000014 16.2753000000000014, 15.1198999999999995 15.1198999999999995, 12.3899000000000008 12.3899000000000008, 12.0899000000000001 12.0899000000000001, 11.2399000000000004 11.2399000000000004, 10.4499999999999993 10.4499999999999993, 10.0000000000000000 10.0000000000000000))'),
    //    0.00001
    //  ),
    // ST_Buffer(
    //  ST_GeomFromText(
    //  'POLYGON ((7.5099000000000000 7.5099000000000000, 7.5099000000000000 10.0000000000000000, 16.2753000000000014 10.0000000000000000, 16.2753000000000014 7.5099000000000000, 7.5099000000000000 7.5099000000000000))'),
    //   0.00001
    //  )
    //);

    //SELECT
    //  ST_GeomFromText(
    //  'LINESTRING (7.5099000000000000 10.0000000000000000, 16.2753000000000014 10.0000000000000000)', 4362
    //  ) AS result;

    //Select
    //ST_Generalize(
    //  ST_Difference(
    //   SimplifyPreserveTopology(
    //    ST_Buffer(
    //     ST_GeomFromText(
    //      'POLYGON ((10.0000000000000000 10.0000000000000000, 9.3300000000000001 9.3300000000000001, 9.1799999999999997 9.1799999999999997, 7.5099000000000000 7.5099000000000000, 9.3002000000000002 9.3002000000000002, 10.5998999999999999 10.5998999999999999, 11.1500000000000004 11.1500000000000004, 11.2399000000000004 11.2399000000000004, 11.4800000000000004 11.4800000000000004, 12.1500000000000004 12.1500000000000004, 12.4800000000000004 12.4800000000000004, 12.4770000000000003 12.4770000000000003, 12.3621999999999996 12.3621999999999996, 12.3042999999999996 12.3042999999999996, 12.5449999999999999 12.5449999999999999, 14.3292000000000002 14.3292000000000002, 15.0982000000000003 15.0982000000000003, 16.0376000000000012 16.0376000000000012, 16.2753000000000014 16.2753000000000014, 15.1198999999999995 15.1198999999999995, 12.3899000000000008 12.3899000000000008, 12.0899000000000001 12.0899000000000001, 11.2399000000000004 11.2399000000000004, 10.4499999999999993 10.4499999999999993, 10.0000000000000000 10.0000000000000000))'
    //     ),
    //     0.00001
    //    ),
    //    0.00001
    //  ),
    //  ST_GeomFromText(
    //   'POLYGON ((7.5099000000000000 7.5099000000000000, 7.5099000000000000 10.0000000000000000, 16.2753000000000014 10.0000000000000000, 16.2753000000000014 7.5099000000000000, 7.5099000000000000 7.5099000000000000))'
    //  )
    // ),
    // 0.00001
    //) AS result


    //SELECT

    // ST_Intersection(
    //  SimplifyPreserveTopology(
    //     ST_Buffer(
    //      ST_GeomFromText(
    //       'POLYGON ((10.0000000000000000 10.0000000000000000, 9.3300000000000001 9.3300000000000001, 9.1799999999999997 9.1799999999999997, 7.5099000000000000 7.5099000000000000, 9.3002000000000002 9.3002000000000002, 10.5998999999999999 10.5998999999999999, 11.1500000000000004 11.1500000000000004, 11.2399000000000004 11.2399000000000004, 11.4800000000000004 11.4800000000000004, 12.1500000000000004 12.1500000000000004, 12.4800000000000004 12.4800000000000004, 12.4770000000000003 12.4770000000000003, 12.3621999999999996 12.3621999999999996, 12.3042999999999996 12.3042999999999996, 12.5449999999999999 12.5449999999999999, 14.3292000000000002 14.3292000000000002, 15.0982000000000003 15.0982000000000003, 16.0376000000000012 16.0376000000000012, 16.2753000000000014 16.2753000000000014, 15.1198999999999995 15.1198999999999995, 12.3899000000000008 12.3899000000000008, 12.0899000000000001 12.0899000000000001, 11.2399000000000004 11.2399000000000004, 10.4499999999999993 10.4499999999999993, 10.0000000000000000 10.0000000000000000))'
    //      ),
    //      0.000001
    //     ),
    //     0.000001
    //   ),
    //  ST_GeomFromText(
    //   'LINESTRING (7.5099000000000000 10.0000000000000000, 16.2753000000000014 10.0000000000000000)'
    //  )
    //) as res

    //SELECT
    //ST_Intersection(
    // SimplifyPreserveTopology(
    //    ST_Buffer(
    //     ST_GeomFromText(
    //      'POLYGON ((10.0000000000000000 10.0000000000000000, 9.3300000000000001 9.3300000000000001, 9.1799999999999997 9.1799999999999997, 7.5099000000000000 7.5099000000000000, 9.3002000000000002 9.3002000000000002, 10.5998999999999999 10.5998999999999999, 11.1500000000000004 11.1500000000000004, 11.2399000000000004 11.2399000000000004, 11.4800000000000004 11.4800000000000004, 12.1500000000000004 12.1500000000000004, 12.4800000000000004 12.4800000000000004, 12.4770000000000003 12.4770000000000003, 12.3621999999999996 12.3621999999999996, 12.3042999999999996 12.3042999999999996, 12.5449999999999999 12.5449999999999999, 14.3292000000000002 14.3292000000000002, 15.0982000000000003 15.0982000000000003, 16.0376000000000012 16.0376000000000012, 16.2753000000000014 16.2753000000000014, 15.1198999999999995 15.1198999999999995, 12.3899000000000008 12.3899000000000008, 12.0899000000000001 12.0899000000000001, 11.2399000000000004 11.2399000000000004, 10.4499999999999993 10.4499999999999993, 10.0000000000000000 10.0000000000000000))'
    //     ),
    //     0.000001
    //    ),
    //    0.000001
    //  ),
    // ST_GeomFromText(
    //  'LINESTRING (7.5099000000000000 10.0000000000000000, 16.2753000000000014 10.0000000000000000)'
    // )
    //) as res
